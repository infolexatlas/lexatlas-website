name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_BASE_URL: "https://lex-atlas.com"
      NEXT_PUBLIC_PLAUSIBLE_DOMAIN: "lex-atlas.com"
    strategy:
      matrix:
        node-version: [20.11.1]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Cache Next build cache
        uses: actions/cache@v4
        with:
          path: |
            .next/cache
          key: next-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-${{ hashFiles('tsconfig.json') }}-${{ hashFiles('next.config.*', 'next.config/**/*', '**/*.tsx', '**/*.ts') }}
          restore-keys: |
            next-${{ runner.os }}-${{ hashFiles('package-lock.json') }}-
            next-${{ runner.os }}-
      - run: npm ci
      - name: Lint
        run: npm run lint
      - name: Typecheck
        run: npm run typecheck
      - name: Build
        env:
          NEXT_PUBLIC_BASE_URL: https://lex-atlas.com
          NEXT_PUBLIC_PLAUSIBLE_DOMAIN: lex-atlas.com
          STRIPE_SECRET_KEY: sk_test_dummy
        run: |
          node scripts/debug-env.js || true
          npm run build --if-present
      - name: Bundle size (Size Limit)
        run: npm run size

  e2e:
    runs-on: ubuntu-latest
    needs: ci
    env:
      NEXT_PUBLIC_BASE_URL: http://127.0.0.1:3000
      NEXT_PUBLIC_PLAUSIBLE_DOMAIN: localhost
      BASE_URL: http://127.0.0.1:3000
    strategy:
      matrix:
        node-version: [20.11.1]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - name: Install Playwright (chromium + system deps)
        run: npx playwright install --with-deps chromium
      - name: Build
        run: |
          node scripts/debug-env.js || true
          npm run build
      - name: Start Next server
        run: |
          npx next start -H 127.0.0.1 -p 3000 & echo $! > .next_pid
      - name: Wait for server
        run: npx wait-on http://127.0.0.1:3000 --timeout 180000
      - name: Run Playwright smoke
        run: npx playwright test --grep @smoke --reporter=line --workers=2
      - name: Run full Playwright suite (non-blocking)
        run: npx playwright test --reporter=line --workers=2 || true
        continue-on-error: true
      - name: Stop Next
        if: always()
        run: |
          kill -9 $(cat .next_pid) || true
          rm -f .next_pid

  analyze:
    name: Bundle analyzer report
    runs-on: ubuntu-latest
    needs: ci
    continue-on-error: true
    strategy:
      matrix:
        node-version: [20.11.1]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-
      - name: Install Playwright browsers (chromium + system deps)
        run: npx playwright install --with-deps chromium
      - name: Build with analyzer
        env:
          NEXT_PUBLIC_BASE_URL: https://lex-atlas.com
          NEXT_PUBLIC_PLAUSIBLE_DOMAIN: lex-atlas.com
        run: |
          ANALYZE=true npm run build
          tar -czf bundle-analyzer-report.tgz .next/analyze || true
      - uses: actions/upload-artifact@v4
        with:
          name: bundle-analyzer-report
          path: bundle-analyzer-report.tgz

  # Visual regression disabled on CI. Keep e2e only.

  prod-checks:
    name: Production headers/robots checks
    runs-on: ubuntu-latest
    needs: ci
    if: always()
    strategy:
      matrix:
        node-version: [20.11.1]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - run: npm ci
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            playwright-${{ runner.os }}-
      - name: Install Playwright browsers (chromium + system deps)
        run: npx playwright install --with-deps chromium
      - name: Build app
        env:
          NODE_ENV: production
          NEXT_PUBLIC_BASE_URL: http://127.0.0.1:3000
          NEXT_PUBLIC_PLAUSIBLE_DOMAIN: 127.0.0.1
          STRIPE_SECRET_KEY: sk_test_dummy
        run: npm run build
      - name: Start app and run prod header/robots tests
        env:
          NODE_ENV: production
          NEXT_PUBLIC_BASE_URL: http://127.0.0.1:3000
          NEXT_PUBLIC_PLAUSIBLE_DOMAIN: 127.0.0.1
        run: |
          npx kill-port 3000 || true
          (npx next start -H 127.0.0.1 -p 3000 & echo $! > .next_pid) &
          npx wait-on http://127.0.0.1:3000 --timeout 180000
          BASE_URL=http://127.0.0.1:3000 npx playwright test -g "@prod-headers-robots"
      - if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-prod-checks
          path: |
            test-results/**
            playwright-report/**
          retention-days: 7
      - if: always()
        run: |
          if [ -f .next_pid ]; then kill -9 "$(cat .next_pid)" || true; rm -f .next_pid; fi

  deploy:
    name: deploy (vercel hook)
    runs-on: ubuntu-latest
    needs: [e2e]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.e2e.result == 'success'
    concurrency:
      group: deploy-main
      cancel-in-progress: false
    steps:
      - name: Check deploy hook secret is present
        run: |
          if [ -z "${{ secrets.VERCEL_DEPLOY_HOOK }}" ]; then
            echo "❌ Missing repo secret VERCEL_DEPLOY_HOOK. Add it in Settings → Secrets and variables → Actions."
            exit 1
          fi
          echo "✅ Found VERCEL_DEPLOY_HOOK secret."

      - name: Trigger Vercel Deploy Hook
        id: vercel
        env:
          VERCEL_DEPLOY_HOOK: ${{ secrets.VERCEL_DEPLOY_HOOK }}
        run: |
          set -euo pipefail
          if [ -z "${VERCEL_DEPLOY_HOOK:-}" ]; then
            echo "No VERCEL_DEPLOY_HOOK configured. Skipping."
            exit 0
          fi
          echo "Calling Vercel Deploy Hook…"
          STATUS=$(curl -sS -o .vercel-hook-resp.txt -w "%{http_code}" -X POST "$VERCEL_DEPLOY_HOOK" || true)
          echo "HTTP status: $STATUS"
          echo "Response:"
          sed -n '1,200p' .vercel-hook-resp.txt || true
          case "$STATUS" in
            200|201|202)
              echo "✅ Deploy hook accepted."
              exit 0
              ;;
            *)
              echo "❌ Deploy hook failed with status $STATUS"
              echo "Tip: Ensure the hook URL matches this project & branch in Vercel (Settings → Git → Deploy Hooks)."
              exit 1
              ;;
          esac
